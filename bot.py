# bot.py ‚Äî PTB v20+

import os
import json
import logging
from typing import Dict, Any

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ====== ENV ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")
TZ = os.getenv("TZ", "Europe/Amsterdam")
MENU_FILE = os.getenv("MENU_FILE", "menu.json")

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN env var")

# ====== LOGGING ======
logging.basicConfig(
    format="%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("sushi-bot")

# ====== MENU / DATA ======
# –û–∂–∏–¥–∞–µ—Ç—Å—è menu.json –≤–∏–¥–∞:
# {
#   "categories": [
#     {"id": "sets", "title_ru": "–°–µ—Ç—ã", "title_nl": "Sets"},
#     {"id": "rolls", "title_ru": "–†–æ–ª–ª—ã", "title_nl": "Rollen"}
#   ],
#   "items": [
#     {"id":"101","cat":"sets","title_ru":"–°–µ—Ç –°–∞–º—É—Ä–∞–π","title_nl":"Samurai Set","price":24.90},
#     {"id":"201","cat":"rolls","title_ru":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è","title_nl":"Philadelphia","price":8.90}
#   ]
# }
with open(MENU_FILE, "r", encoding="utf-8") as f:
    MENU = json.load(f)

CATEGORIES = {c["id"]: c for c in MENU.get("categories", [])}
ITEMS: Dict[str, Dict[str, Any]] = {i["id"]: i for i in MENU.get("items", [])}

# ====== i18n ======
I18N = {
    "start": {
        "ru": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω *Sushi Aurum*. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "nl": "Hoi! Dit is *Sushi Aurum*. Kies een categorie:",
    },
    "browse": {"ru": "–ú–µ–Ω—é", "nl": "Menu"},
    "cart": {"ru": "üõí –ö–æ—Ä–∑–∏–Ω–∞", "nl": "üõí Winkelmand"},
    "back": {"ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "nl": "‚¨ÖÔ∏è Terug"},
    "choose_cat": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "nl": "Kies een categorie:",
    },
    "choose_item": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:",
        "nl": "Kies een item:",
    },
    "added": {"ru": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.", "nl": "Toegevoegd aan mandje."},
    "empty_cart": {"ru": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", "nl": "Je mandje is leeg."},
    "cart_title": {"ru": "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:", "nl": "In je mandje:"},
    "add": {"ru": "–î–æ–±–∞–≤–∏—Ç—å", "nl": "Toevoegen"},
    "price": {"ru": "–¶–µ–Ω–∞", "nl": "Prijs"},
}

DEFAULT_LANG = "ru"  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ "nl" –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

# ====== STATE (in-memory) ======
# carts: user_id -> {item_id: qty}
CARTS: Dict[int, Dict[str, int]] = {}


# ====== HELPERS ======
def lang_of_user(update: Update) -> str:
    # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ ru. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å —è–∑—ã–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.
    return DEFAULT_LANG


def money(x: float) -> str:
    return f"{x:.2f}"


def main_kb(lang: str) -> InlineKeyboardMarkup:
    # –î–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ menu.json + –∫–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    buttons = []
    # –ï—Å–ª–∏ –≤ –º–µ–Ω—é –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä—è–¥–æ–º
    row = []
    for cat in MENU.get("categories", []):
        row.append(InlineKeyboardButton(
            text=cat.get(f"title_{lang}", cat.get("title_ru", "Menu")),
            callback_data=f"browse:{cat['id']}",
        ))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # –ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    buttons.append([
        InlineKeyboardButton(I18N["cart"][lang], callback_data="cart")
    ])
    return InlineKeyboardMarkup(buttons)


def items_kb(cat_id: str, lang: str) -> InlineKeyboardMarkup:
    buttons = []
    for it in (x for x in ITEMS.values() if x.get("cat") == cat_id):
        title = it.get(f"title_{lang}", it.get("title_ru", "Item"))
        buttons.append([InlineKeyboardButton(title, callback_data=f"item:{it['id']}")])
    buttons.append([InlineKeyboardButton(I18N["back"][lang], callback_data="home")])
    return InlineKeyboardMarkup(buttons)


def item_kb(item_id: str, lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(I18N["add"][lang], callback_data=f"add:{item_id}")],
        [InlineKeyboardButton(I18N["back"][lang], callback_data=f"browse:{ITEMS[item_id]['cat']}")],
    ])


# ====== HANDLERS ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = lang_of_user(update)
    await update.message.reply_text(
        I18N["start"][lang],
        reply_markup=main_kb(lang),
        parse_mode="Markdown",
    )


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = lang_of_user(update)
    query = update.callback_query
    await query.answer()

    data = query.data or ""

    # –î–æ–º–æ–π (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    if data == "home":
        await query.edit_message_text(
            I18N["choose_cat"][lang],
            reply_markup=main_kb(lang),
        )
        return

    # –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if data == "cart":
        uid = update.effective_user.id
        cart = CARTS.get(uid, {})
        if not cart:
            await query.edit_message_text(I18N["empty_cart"][lang], reply_markup=main_kb(lang))
            return
        lines = [I18N["cart_title"][lang], ""]
        total = 0.0
        for item_id, qty in cart.items():
            it = ITEMS.get(item_id)
            if not it:
                continue
            price = float(it.get("price", 0))
            subtotal = price * qty
            total += subtotal
            title = it.get(f"title_{lang}", it.get("title_ru", "Item"))
            lines.append(f"‚Ä¢ {title} √ó {qty} ‚Äî ‚Ç¨ {money(subtotal)}")
        lines.append("")
        lines.append(f"–ò—Ç–æ–≥–æ: ‚Ç¨ {money(total)}")
        await query.edit_message_text("\n".join(lines), reply_markup=main_kb(lang))
        return

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("browse:"):
        cat_id = data.split(":", 1)[1]
        cat = CATEGORIES.get(cat_id)
        if not cat:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_kb(lang))
            return
        await query.edit_message_text(
            I18N["choose_item"][lang],
            reply_markup=items_kb(cat_id, lang),
        )
        return

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if data.startswith("item:"):
        item_id = data.split(":", 1)[1]
        it = ITEMS.get(item_id)
        if not it:
            await query.edit_message_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_kb(lang))
            return
        title = it.get(f"title_{lang}", it.get("title_ru", "Item"))
        price = it.get("price", 0)
        text = f"*{title}*\n{I18N['price'][lang]}: ‚Ç¨ {money(float(price))}"
        await query.edit_message_text(
            text,
            reply_markup=item_kb(item_id, lang),
            parse_mode="Markdown",
        )
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if data.startswith("add:"):
        item_id = data.split(":", 1)[1]
        uid = update.effective_user.id
        CARTS.setdefault(uid, {})
        CARTS[uid][item_id] = CARTS[uid].get(item_id, 0) + 1
        await query.answer(I18N["added"][lang], show_alert=False)

        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∂–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å–Ω–æ–≤–∞
        it = ITEMS.get(item_id)
        if it:
            title = it.get(f"title_{lang}", it.get("title_ru", "Item"))
            price = it.get("price", 0)
            text = f"*{title}*\n{I18N['price'][lang]}: ‚Ç¨ {money(float(price))}"
            await query.edit_message_text(
                text,
                reply_markup=item_kb(item_id, lang),
                parse_mode="Markdown",
            )
        else:
            await query.edit_message_text(I18N["choose_cat"][lang], reply_markup=main_kb(lang))


# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –æ—Ç–≤–µ—Ç ¬´/menu¬ª —Ç–µ–º –∂–µ, —á—Ç–æ –∏ /start
async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    lang = lang_of_user(update)
    await update.message.reply_text(I18N["start"][lang], reply_markup=main_kb(lang), parse_mode="Markdown")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))
    # –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    log.info("Bot started")
    app.run_polling()


if __name__ == "__main__":
    main()
